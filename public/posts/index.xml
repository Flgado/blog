<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Techshepre</title>
    <link>https://jfolgado.com/posts/</link>
    <description>Recent content in Posts on Techshepre</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jul 2025 10:31:07 +0100</lastBuildDate><atom:link href="https://jfolgado.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Behind the Scenes of Go Trino Driver — Making Spooling Work for You</title>
      <link>https://jfolgado.com/posts/trinogoclientspooling/</link>
      <pubDate>Fri, 18 Jul 2025 10:31:07 +0100</pubDate>
      
      <guid>https://jfolgado.com/posts/trinogoclientspooling/</guid>
      
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;https://jfolgado.com/images/post_3/trino.png&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;This post aims to explain how we leveraged the Go Trino driver to make the most out of Trino’s spooling protocol. I’ll try to keep it short and sweet — first with a quick intro to the spooling protocol, then diving into how we orchestrated goroutines to squeeze out maximum performance, all while keeping in mind that we want to release resources from Trino as soon as possible (I’ll get into that).&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Building a Real-Time Sentiment Analysis Pipeline with AWS</title>
      <link>https://jfolgado.com/posts/sentimentalanalises/</link>
      <pubDate>Fri, 21 Feb 2025 22:31:07 +0100</pubDate>
      
      <guid>https://jfolgado.com/posts/sentimentalanalises/</guid>
      
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;https://jfolgado.com/images/post_2/test.drawio.svg&#34;
    alt=&#34;Required User Permissions&#34;&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Welcome back to my AWS journey! In this blog, I’ll be diving into a real-time sentiment analysis pipeline built with AWS. As I continue working towards my AWS Developer Associate certification, I’m excited to share what I’ve learned so far.&lt;/p&gt;
&lt;p&gt;I’ll guide you through how to use AWS services like Lambda, Comprehend, Firehose, and QuickSight to transform raw data into actionable insights in real-time. Plus, I’ll be deploying everything using AWS SAM (Serverless Application Model), so you can see just how easy it is to build and manage serverless applications.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Deploying a Secure API Using AWS SAM and Cognito Made Easy</title>
      <link>https://jfolgado.com/posts/serverlessapiwithauth/</link>
      <pubDate>Mon, 21 Oct 2024 22:31:07 +0100</pubDate>
      
      <guid>https://jfolgado.com/posts/serverlessapiwithauth/</guid>
      
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;https://jfolgado.com/images/post_1/graphic.jpeg&#34;&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;As part of my journey toward earning the AWS Certified Developer certification, I’ve been diving into various AWS services. In this blog, I’ll guide you through setting up a secure API with AWS Cognito for authentication and API Gateway to handle requests. We’ll leverage AWS Lambda to process these API calls, creating a fully serverless architecture.&lt;/p&gt;
&lt;p&gt;I’ll also walk you through how to easily deploy both the API and Cognito configuration using AWS SAM (Serverless Application Model) and explain how the API integrates with Cognito for authentication. Additionally, I’ll show you how to use the API to interact with other AWS services, such as publishing messages to AWS IoT MQTT and retrieving images from S3 buckets.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
